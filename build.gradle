allprojects { // for all projects including the root project
  apply plugin: 'idea'
  // TODO NOT SURE NEED THIS
  apply plugin: 'eclipse'
  apply plugin: 'maven-publish'
  apply plugin: 'maven'
  apply plugin: 'signing'

  group = 'com.linkedin.parseq'

  repositories {
    mavenCentral()
    mavenLocal()
  }
}


subprojects {
  apply plugin: 'java'
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
  archivesBaseName = project.name

  if (it.name.startsWith('parseq')) { // all contrib modules
    dependencies {
      compile project(":core")
      testCompile project(path: ':test-utils', configuration: 'testArtifacts')
    }
  }

  // package jar
  task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
  }

  task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
  }

  // configure MANIFEST
  jar {
    manifest {
      attributes("Created-By": "Gradle",
          "Version": version,
          "Built-By": sonatypeUsername,
          "Build-JDK": JavaVersion.current())
    }
  }

  javadoc {
    options.use = true
    options.author = true
    options.bottom = "Copyright &#169; 2018. All rights reserved."
    options.classpath += file("${project.projectDir.absolutePath}/src/main/java")
    options.links("https://docs.oracle.com/javase/8/docs/api/")
    options.addStringOption("charset", "UTF-8")
  }

  if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  // Not include parseq-examples and parseq-legacy-examples, since we don't need to publish their jar files
  afterEvaluate {
    if ((it.name.startsWith('parseq') && !it.name.endsWith('examples')) || it.name.startsWith('core')) {
      artifacts {
        archives jar
        archives packageJavadoc
        archives packageSources
      }
    }
    if (it.name.equals("parseq-examples") || it.name.equals("parseq-legacy-examples")) {
      project.tasks.uploadArchives.enabled = false
    }
  }

  // sign up
  signing {
    required = { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }

  // publish to maven
  uploadArchives {
    repositories {
      mavenDeployer {
        // pom signature
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
// TODO uncomment this
//        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//          authentication(userName: sonatypeUsername, password: sonatypePassword)
//        }
//
//        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
//          authentication(userName: sonatypeUsername, password: sonatypePassword)
//        }

        //TODO DELETE USE LOCAL REPO
        repository(url: "file:/Users/jguan/Desktop/exper") {
          authentication(userName: sonatypeUsername, password: sonatypePassword)
        }


        pom.project {
          name project.name
          packaging 'jar'
          url 'http://github.com/linkedin/parseq'

          scm {
            url 'git@github.com:linkedin/parseq.git'
            connection 'scm:git:git@github.com:linkedin/parseq.git'
            developerConnection 'scm:git:git@github.com:linkedin/parseq.git'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }
        }
      }
    }
  }
}


task runTracevisServer (dependsOn:':parseq-tracevis-server:build') << {
  description 'Start trace visualization server for observing the execution of tasks.'

  def dotLocation = '/usr/local/bin/dot'
  def tracevisJar = "${projectDir}/contrib/parseq-tracevis-server/build/libs/parseq-tracevis-server-" + version + '-jar-with-dependencies.jar'

  File docFile = new File(dotLocation)
  if (docFile.exists()) {
    javaexec {
      main="-jar";
      args = [
          tracevisJar,
          dotLocation
      ]
    }
  } else {
    logger.error('Can not find dot tools, please install it or check the docLocation!')
  }
}