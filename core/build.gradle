description = '''ParSeq project core code'''

archivesBaseName = 'parseq'

//TODO avoid buildscript dependency
buildscript {
  repositories {
    maven {
      url "http://repo1.maven.org/maven2/"
    }
  }

  dependencies {
    classpath group: 'net.sourceforge.fmpp', name: 'fmpp', version: '0.9.14'
  }

  ant.taskdef(name: 'fmpp', classname:'fmpp.tools.AntTask', classpath: buildscript.configurations.classpath.asPath)
}


configurations {
  buildBootstrap {
    description "build time dependencies"
    visible = false
  }

  bootstrap {
    description "bootstrapping dependencies"
    visible = false
  }

  compile {
    description "compile time dependencies"
    extendsFrom buildBootstrap
  }

  runtime {
    description "dependencies required to run parseq"
    extendsFrom buildBootstrap
  }

  testCompile {
    description "compile classpath for source set 'test'"
    extendsFrom buildBootstrap
    visible = false
  }
}

dependencies {
  buildBootstrap group: "org.codehaus.jackson", name: "jackson-core-asl", version: '1.8.8'
  buildBootstrap group: "org.codehaus.jackson", name: "jackson-mapper-asl", version: "1.8.8"
  buildBootstrap group: "org.slf4j", name: "slf4j-api", version: "1.7.25"
  bootstrap group: "net.sourceforge.fmpp", name: "fmpp", version: "0.9.15"

  compile group: "org.testng", name: "testng", version: "6.9.9"
  testCompile group: "org.testng", name: "testng", version: "6.9.9"
  testCompile group: "org.slf4j", name: "slf4j-log4j12", version: "1.7.25"
  testCompile project (path: ':test-utils', configuration: 'testArtifacts')
}


javadoc {
 //TODO NOT DECIDE TO CONFIGURE THIS OR NOT
  options.use = false
}

// publish to maven
uploadArchives {
  repositories {
    mavenDeployer {
      pom.artifactId = 'parseq'
      // pom signature
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
    }
  }
}


// When update the template and data in codegen, need to run this task before gradle build task
task generateFmppSources {
  description 'Configure Freemarker to generate TupleNtask, ParNTask code in source folder.'
  doLast {
    println "Generating sources...."
    ant.fmpp configuration: "$projectDir/src/main/codegen/config.fmpp",
        sourceRoot: "$projectDir/src/main/codegen/templates",
        outputRoot: "$projectDir/src/main/java"
  }
}

